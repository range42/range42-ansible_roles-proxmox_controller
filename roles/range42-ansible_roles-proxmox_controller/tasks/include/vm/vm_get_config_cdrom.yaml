---
##
##
##

- block:
    ####
    ####

    - name: VM - GET CONFIG - CDROM STATUS
      vars:
        proxmox_vmid: 100 # TODO - OVERWRITED_ARGUMENTS

      uri:
        url: "https://{{ proxmox_api_host }}/api2/json/nodes/{{ proxmox_node }}/qemu/{{ proxmox_vmid }}/config"
        method: GET
        headers:
          Authorization: "PVEAPIToken={{ proxmox_api_user }}!{{ proxmox_api_token_id }}={{ proxmox_api_token_secret }}"
        validate_certs: no
      register: proxmox_call

    ####
    ####

    - name: VM - print proxmox_call
      debug:
        var: proxmox_call

    # - name: RETURN ONLY TASK OUTPUT - proxmox_call_network_vm_list_int
    #   shell: |
    #     echo "{{ proxmox_call_vm_config_is_iso_mount_in_cdrom.json.data |
    #       to_nice_yaml }}" |
    #       grep "media=cdrom"
    #   register: proxmox_call__shell_pipe__cdrom_status

    # - debug: var=proxmox_call__shell_pipe__cdrom_status.stdout_lines

    ####
    ####

    - name: VM - GET CONFIG - BUILD JSON
      set_fact:
        vm_get_config_cdrom: >-
          {{ 
          {

            'action' : "vm_get_config_cdrom", 
            'source' : "proxmox", 
            'proxmox_node': proxmox_node,

            'vm_id'  : proxmox_vmid,
            'vm_cdrom_device': item.key,
            'vm_cdrom_iso': item.value.split(',')[0],

            'vm_cdrom_media':  (item.value
                    | regex_findall('media=([^,]+)')
                    | first
                    | default('?')),

            'vm_cdrom_size':   (item.value
                    | regex_findall('size=([^,]+)')
                    | first
                    | default('?'))
          }
          }}
      loop: "{{ proxmox_call.json.data | dict2items }}"
      when: item.value is search('media=cdrom')
      loop_control:
        label: "{{ item.key }}"

    - name: VM - GET CONFIG - PRINT JSON
      debug:
        var: vm_get_config_cdrom

  when: proxmox_vm_action == "vm_get_config_cdrom"
